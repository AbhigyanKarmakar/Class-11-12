#include<conio.h>
#include<dos.h>
#include<stdlib.h>
#include<fstream.h>
const int X_MAX=80;
const int Y_MAX=24;
const int BLOCKS=12;
int block[]={219,0,47,92,168,222,61,45,95,205,240,46}; //ASCII codes
struct cl_matrix   //Matrix with intrinsic colour properties
{
  int val;
  int colour;
};
int global_filepointer=0;    //<-----Slight shortcut
							 //Although I prefer explicit logic
class Matrix                 //rather than implicit ones
{                            //had to use this method
  private:
	cl_matrix ARRAY[Y_MAX][X_MAX];//Main maze matrix  Console screen is 80x25
  public:
	void input(int , int , int , int);
	void output(void);
	void fill(int , int);
	void boxfill(int , int , int , int);
	int colour_ret(int , int);
	int val_ret(int , int);
	Matrix(void);
}
matrix;
int Matrix::val_ret(int i , int j)
{
  return ARRAY[i][j].val;
}
int Matrix::colour_ret(int i , int j)
{
  return ARRAY[i][j].colour;
}
void Matrix::output(void)
{
  for (int i=0 ; i<Y_MAX ; ++i)
	for (int j=0 ; j<X_MAX ; ++j)
	  if (ARRAY[i][j].val)
	  {
		textcolor(ARRAY[i][j].colour);//cprintf is better suited to printing
		gotoxy(j+1,i+1);              //diff colors
		cprintf("%c",ARRAY[i][j].val);
	  }
}

Matrix::Matrix(void)             //Constructor
{
  this->fill(0,0);
}

void Matrix::input(int i , int j , int val , int colour)
{
  ARRAY[i][j].val=val;
  ARRAY[i][j].colour=colour;
}
void Matrix::boxfill(int y , int x , int block , int colour)
{
  while(this->val_ret(y,x)!=block) y--;
  while(this->val_ret(y,x)==block) x--;   x++; //Off by one correction
  x++;  y++;  //1st blank point in box
  for(int i=y ; this->val_ret(i,x)!=block ; i++)
	for(int j=x ; this->val_ret(i,j)!=block ; j++)
	  this->input(i,j,block,colour);
}
void Matrix::fill(int block , int colour)
{
  for (int i=0 ; i<Y_MAX ; ++i)
	for (int j=0 ; j<X_MAX ; ++j)
	{
	  ARRAY[i][j].val=block;
	  ARRAY[i][j].colour=colour;
	}
}

int confirmation(void)  //Function to check for confirmation
{                       //Returns 1 for yes 0 for no and -1 for
  clrscr();             //abnormal answers(i.e neither yes or no)
  char choice;
  gotoxy(27,11);
  cout<<"Are you sure you want to save?";
  gotoxy(27,13);
  cout<<"Choice (y/n) : ";
  cin>>choice;
  if(choice=='y'||choice=='Y')
	return 1;
  else if(choice=='n'||choice=='N')
	return 0;
  return -1; //Only happens for abnormal answers
}

void GUI(fstream &file ,int filepointer=0, int modifier_status=0)
{
  int t=0 , c=7; //Index variable initialising colur light grey
  char move='\0';
  int x=1,y=1,chk=0,PAINT_MODE=0;
  if (modifier_status)
  {
	file.seekg(filepointer);
	file.read((char*)&matrix , sizeof(matrix));
  }
  clrscr();
  while(1)
  {
	move=getch();
	switch(move)
	{
	  case 'W':
	  case 'w': gotoxy(x,y);     //Move Cursor UP
				cout<<' ';
				y--;
				if (y<1)
				  y=Y_MAX;
				break;
	  case 'S':
	  case 's': gotoxy(x,y);     //Move Cursor DOWN
				cout<<' ';
				y++;
				if (y>Y_MAX)
				  y=1;
				break;
	  case 'A':
	  case 'a': gotoxy(x,y);     //Move Cursor LEFT
				cout<<' ';
				x--;
				if (x<1)
				 x=X_MAX;
				break;
	  case 'D':
	  case 'd': gotoxy(x,y);     //Move Cursor RIGHT
				cout<<' ';
				x++;
				if (x>X_MAX)
				 x=1;
				break;
	  case ' ': matrix.input(y-1 , x-1 , block[t] , c);//Put current block
				break;                                 //in matrix
	  case 'R':
	  case 'r': matrix.input(y-1 , x-1 , 0 , 0); //Eraser
				clrscr();
				break;
	  case '.': ++t;        //Change block type
				if(t>BLOCKS-1)
				  t=0;
				break;
	  case ',': --t;        //Change block type
				if(t<0)
				  t=BLOCKS-1;
				break;
	  case 'C':
	  case 'c': c++;        //Change colour also no pun intended
				if(c>15)
				  c=1;
				textcolor(c);
				gotoxy(x,y);
				cprintf("%c",block[t]);
				break;
	  case 'B':
	  case 'b': if(c<128)
				  c+=128;
				else
				  c-=128;
				break;
	  case '-': chk=confirmation(); //confirmation() returns 1 for yes
				if(chk)
				{
				  file.seekp(::global_filepointer);
				  file.write((char*)&matrix , sizeof(matrix));//Write to file
				  if(modifier_status)
					goto EXIT;
				  clrscr();
				  for (int i=0 ; i<Y_MAX ; ++i)
					for (int j=0 ; j<X_MAX ; ++j)
					  matrix.input(i , j , 0 , 0);   //Clear Matrix
				  matrix.output();                   //Output Blank Screen
				}
				else if(!chk)
				{
				  clrscr();
				  matrix.output();
				}
				break;
	  case 'm':
	  case 'M': fstream file("manual.txt" , 1);
				char ch;
				textcolor(7);
				clrscr();
				while(file)
				{
				  file.get(ch);
				  if(file)
					cout<<ch;
				}
				getch();
				textcolor(c);
				clrscr();
				matrix.output();
				break;
	  case 'E':
	  case 'e': clrscr();
				matrix.fill(0,0);
				matrix.output();
				break;
	  case 'V':
	  case 'v': for(int i=y-1 ; i<Y_MAX ; i++)
				  matrix.input(i,x-1,block[t],c);
				matrix.output();
				break;
	  case 'H':
	  case 'h': for(int j=x-1 ; j<X_MAX ; j++)
				  matrix.input(y-1,j,block[t],c);
				matrix.output();
				break;
	  case 'G':
	  case 'g': matrix.boxfill(y-1,x-1,block[t],c);
				break;
	  case 'Y':
	  case 'y': c=matrix.colour_ret(y-1,x-1);
				for(t=0 ; block[t]!=matrix.val_ret(y-1,x-1) ; t++);
				break;
	  case 'F':
	  case 'f': matrix.fill(block[t],c);
				break;
	  case 'P':
	  case 'p': if(!PAINT_MODE)
				  PAINT_MODE=1;
				else
				  PAINT_MODE=0;
				break;
	  case 'X':
	  case 'x': goto EXIT;
	}
	if(PAINT_MODE)
	  matrix.input(y-1 , x-1 , block[t] , c);
	matrix.output();//Display Array
	gotoxy(x,y);  //Display currently selected block
	textcolor(c);
	cprintf("%c",block[t]);
	gotoxy(x,y);  //Small beautification detail
	//gotoxy(65,1);
	//cout<<"X : "<<x<<"Y : "<<y;
  }
  EXIT:
}

void level_add(char name[15],int filepointer=0,int filemodifierstatus=0)
{
  fstream file;  //For database functions
  if (filepointer||filemodifierstatus)
	file.open(name,ios::out|ios::binary|ios::ate|ios::in);
  else
	file.open(name,ios::out|ios::binary|ios::app|ios::in);
  file.seekp(filepointer);
  GUI(file,filepointer,filemodifierstatus);
  clrscr();
}

void level_view(char name[15])
{
  clrscr();
  fstream file;
  char ch='\0';
  file.open(name,ios::in|ios::binary);
  while(1)
  {
	::global_filepointer=file.tellg();
	file.read((char*)&matrix , sizeof(matrix));
	if (file.eof())
	  break;
	clrscr();
	matrix.output();
	ch=getch();
	if (ch=='m'||ch=='M')
	  goto EXIT;
  }
  EXIT:
}

void level_modify(char name[15])
{
  clrscr();
  fstream file;
  file.open(name,ios::in|ios::out|ios::binary);
  level_view(name);
  clrscr();
  file.seekg(::global_filepointer);
  file.read((char*)&matrix , sizeof(matrix));
  matrix.output();
  level_add(name,::global_filepointer,1);
}

void main()
{
  textcolor(7);
  clrscr();
  char name[15];
  cout<<"Enter Database Name : ";
  cin.getline(name,14);
  cout<<"\n1.Add Levels"
	  <<"\n2.View Levels"
	  <<"\n3.Modify Levels"
	  <<"\n4.Exit"
	  <<"\n\nChoice : ";
  int choice=0;
  cin>>choice;
  if (choice==1)
	level_add(name);
  else if(choice==2)
	level_view(name);
  else if(choice==3)
	level_modify(name);
  else if(choice==4)
	goto MAINEXIT;
  MAINEXIT:
}
