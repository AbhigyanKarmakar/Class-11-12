#include<fstream.h>
#include<conio.h>
#include<stdlib.h>
#include<limits.h>
#include<stdio.h>
int SCORE=0;
int SHIP_X=25;
int SHIP_Y=5;
const int GAME_SPEED=5;
const int SCORE_MINUS=5;
const int SCORE_PLUS=1;
const int BLOCK=219;
const int X_MAX=80;  //Screen width is 80 cells
const int Y_MAX=24;  //Screen height is 24 cells

int confirmation(void)  //Function to check for confirmation
{                       //Returns 1 for yes 0 for no and -1 for
  clrscr();             //abnormal answers(i.e neither yes or no)
  char choice;
  gotoxy(27,11);  //Kinda centre of screen
  cout<<"Are you sure you want to quit?";
  gotoxy(27,13);
  cout<<"Choice (y/n) : ";
  cin>>choice;
  if(choice=='y'||choice=='Y')
	return 1;
  else if(choice=='n'||choice=='N')
	return 0;
  return -1; //Only happens for abnormal answers
}

struct cl_matrix     //Matrix with intrinsic colour properties
{
  int val;
  int colour;
};
class Matrix
{
  private:
	cl_matrix ARRAY[Y_MAX][X_MAX];//Main maze matrix  Console screen is 80x24
  public:
	void input(int , int , int , int);
	void output(void);
	void fill(int , int);
	void drawship(int , int);
	void removeship(int , int);
	void drawlines(int , int , int);
	void gamemove(void);
	int colour_ret(int , int);
	int val_ret(int , int);
	Matrix(void);
}
matrix;
int Matrix::val_ret(int i , int j)
{
  return ARRAY[i][j].val;
}
int Matrix::colour_ret(int i , int j)
{
  return ARRAY[i][j].colour;
}
void Matrix::output(void)
{
  for (int i=1 ; i<Y_MAX ; ++i)  //1st line omitted
	for (int j=0 ; j<X_MAX ; ++j)
	{
	  gotoxy(j+1,i+1);
	  textcolor(ARRAY[i][j].colour);
	  cprintf("%c",ARRAY[i][j].val);
	}
}

Matrix::Matrix(void)             //Constructor
{
  this->fill(0,0);
}

void Matrix::input(int i , int j , int val , int colour)
{
  ARRAY[i][j].val=val;
  ARRAY[i][j].colour=colour;
}

void Matrix::drawlines(int region , int type , int colour)
{
  textcolor(colour); //Damned americans
  if(region==1)
  {
	int j=X_MAX-1;
	for(int i=0 ; i<type+random(random(4)+5) ; ++i)
	  this->input(i,j,BLOCK,colour);
  }
  if(region==2)
  {
	int j=X_MAX-1;
	for(int i=Y_MAX ; i>Y_MAX-type+random(random(5)+4) ; --i)
	  this->input(i,j-1,BLOCK,colour);
  }
}

void gameover(void)
{
  gotoxy(22,12);  //Kinda centre of screen
  cprintf("YOU LOST !!!!  :( PRESS Y TO TRY AGAIN");
  char ch=getch();
  if (ch=='y'||ch=='Y')
  {
	SCORE=0;
	matrix.fill(0,0);
  }
  else
	exit(0);
}

void Matrix::drawship(int i , int j)
{
  if(matrix.val_ret(i,j+1)==BLOCK)
	if(matrix.colour_ret(i,j+1)==5)
	  ::SCORE+=SCORE_PLUS;
	else
	  ::SCORE-=SCORE_MINUS;
  if(::SCORE<0)
	gameover();
  gotoxy(1,1);
  textcolor(random(7)+1);
  cprintf("SCORE : %d",::SCORE);
  this->input(i,j,int('='),4);    //TRY MAKING A BETTER SHIP MAYBE
  this->input(i,j+1,int('>'),4);
}

void Matrix::removeship(int i , int j)
{
  this->input(i,j,0,0);
  this->input(i,j+1,0,0);
  gotoxy(1,1); cout<<"                    ";
}

void Matrix::fill(int block , int colour)
{
  for (int i=0 ; i<Y_MAX ; ++i)
	for (int j=0 ; j<X_MAX ; ++j)
	  this->input(i,j,block,colour);
}
void Matrix::gamemove(void)
{
  long int counter=0;
  int inix , iniy;
  char move='\0';
  getch();
  while(move!='x')
  {
	randomize();
	this->drawlines(rand()%2+1,random((rand()%14)+1)+1,random(counter%15));
	if(counter%200)
	  this->input(random(Y_MAX),random(X_MAX),219,5);
	this->drawlines(rand()%2+1,random((rand()%14)+1)+1,random(counter%15));
	while(kbhit())     //Hey I tried okay but the line went out of screen
	{                  //Ma bad
	  move=getch();
	  switch(move)
	  {
		case 'W':
		case 'w': if(SHIP_Y)          //Move Ship UP
					--SHIP_Y;
				  break;
		case 'S':
		case 's': if(SHIP_Y<Y_MAX)    //Move Ship DOWN
					++SHIP_Y;
				  break;
		case 'A':
		case 'a': if(SHIP_X)          //Move Ship LEFT
					--SHIP_X;
				  break;
		case 'D':
		case 'd': if (SHIP_X<X_MAX)   //Move Ship RIGHT
					++SHIP_X;
				  break;
		case 'M':
		case 'm': fstream file("gmanual.txt" , 1);
				  char ch;
				  textcolor(7);
				  clrscr();
				  while(file)
				  {
					file.get(ch);
					if(file)
					  cout<<ch;
				  }
				  getch();
				  clrscr();
				  matrix.output();
				  break;
		case '-': if(confirmation())
					move='x';
				  else
					clrscr();
	  }
	}
	++counter;
	if(counter==LONG_MAX) counter=0;
	if(!(counter%GAME_SPEED))
	  for(int i=0 ; i<Y_MAX ; ++i)
		for(int j=1 ; j<X_MAX ; ++j)
		{
		  this->input(i,j-1,this->val_ret(i,j),this->colour_ret(i,j));
		  this->input(i,j,0,0);
		}
	this->drawship(SHIP_Y,SHIP_X);
	this->output();
	this->removeship(SHIP_Y,SHIP_X);
  }
}
void main()
{
  clrscr();
  matrix.gamemove();
}

