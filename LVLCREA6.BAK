#include<conio.h>
#include<dos.h>
#include<stdlib.h>
#include<fstream.h>
int block_check(int input)
{
  int block[]={222,61,45,95,205,240,46,47,92,168};
  for(int i=0 ; i<10/*No. of blocks*/ ; ++i)
	if (input==block[i])
	  return 1;
  return 0;
}
struct cl_matrix   //Matrix with intrinsic color properties
{
  int val;
  int color;
};
int global_filepointer=0;    //<-----Slight shortcut
				 //Although I prefer explicit logic
class Matrix                 //rather than implicit ones
{                            //had to use this method
  private:
	cl_matrix ARRAY[25][80];//Main maze matrix  Console screen is 80x25
  public:
	void input(int i , int j ,int val , int color);
	void output(void);
	void AI(int , int , int , int , int);
	void floodfill(int , int);
	int Matrixreturn(int,int);
	Matrix(void);
}
matrix;
int Matrix::Matrixreturn(int i , int j)
{
  return ARRAY[i][j].val;
}

void Matrix::output(void)
{
  for (int i=0 ; i<25 ; ++i)
	for (int j=0 ; j<80 ; ++j)
	  if (ARRAY[i][j].val)
	  {
	textcolor(ARRAY[i][j].color);//cprintf is better suited to printing
	gotoxy(j+1,i+1);             //diff colors
	cprintf("%c",ARRAY[i][j].val);
	  }
}

Matrix::Matrix(void)             //Constructor
{
  for (int i=0 ; i<25 ; ++i)
	for (int j=0 ; j<80 ; ++j)
	{
	  ARRAY[i][j].val=0;
	  ARRAY[i][j].color=0;
	}
}

void Matrix::input(int i , int j , int val , int color)
{
  ARRAY[i][j].val=val;
  ARRAY[i][j].color=color;
}

void Matrix::floodfill(int i , int j)
{
  if( !i || !j || i==25 || j==80 ) //Boundary Conditions
	return;

  int DOWN=0,UP=0,RIGHT=0,LEFT=0;

  if(
	  ARRAY[i][j].val != ( ARRAY[i+1][j].val + 1 )
	  &&(!block_check(ARRAY[i+1][j].val))
	) //If Current != Lower+1
  {
	ARRAY[i+1][j].val=ARRAY[i][j].val+1;
	DOWN=1;
  }

  if(
	  ARRAY[i][j].val != ( ARRAY[i-1][j].val + 1 )
	  &&(!block_check(ARRAY[i-1][j].val))
	) //If Current != Upper+1
  {
	ARRAY[i-1][j].val=ARRAY[i][j].val+1;
	UP=1;
  }

  if(
	  ARRAY[i][j].val != ( ARRAY[i][j+1].val + 1 )
	  &&(!block_check(ARRAY[i][j+1].val))
	) //If Current != Right+1
  {
	ARRAY[i][j+1].val=ARRAY[i][j].val+1;
	RIGHT=1;
  }

  if(
	  ARRAY[i][j].val != ( ARRAY[i][j-1].val + 1 )
	  &&(!block_check(ARRAY[i][j-1].val))
	) //If Current != Left+1
  {
	ARRAY[i][j-1].val=ARRAY[i][j].val+1;
	LEFT=1;
  }

  if(DOWN)
	floodfill(i+1 , j);
  else
	return;

  if(UP)
	floodfill(i-1 , j);
  else
	return;

  if(RIGHT)
	floodfill(i , j+1);
  else
	return;

  if(LEFT)
	floodfill(i , j-1);
  else
	return;
}

void Matrix::AI(int Playeri , int Playerj , int i , int j , int hit)
{               //call with AI(....., kbhit())
  if (hit)
	return;
  delay(300);
  this->floodfill(Playeri,Playerj); //All other i,j is for the enemy
  int a[4];
  a[0]=ARRAY[i+1][j].val;
  a[1]=ARRAY[i-1][j].val;
  a[2]=ARRAY[i][j+1].val;
  a[3]=ARRAY[i][j-1].val;
  for(int n=0 ; n<4 ; ++n)
	if(a[n]==2)  //2 is player character ascii code
	  return;
  int small=32000;
  for(n=0 ; n<4 ; ++n)
	if(a[n]<small)
	  small=a[n];

  if(ARRAY[i+1][j].val==small)
  {
	this->input(i+1 , j , ARRAY[i][j].val , ARRAY[i][j].color);
	this->input(i , j , 0 , 0);
	this->output();
	this->AI(Playeri, Playerj , i+1 , j , kbhit());
  }

  else if(ARRAY[i-1][j].val==small)
  {
	this->input(i-1 , j , ARRAY[i][j].val , ARRAY[i][j].color);
	this->input(i , j , 0 , 0);
	this->output();
	this->AI(Playeri, Playerj , i-1 , j , kbhit());
  }

  else if(ARRAY[i][j+1].val==small)
  {
	this->input(i , j+1 , ARRAY[i][j].val , ARRAY[i][j].color);
	this->input(i , j , 0 , 0);
	this->output();
	this->AI(Playeri, Playerj , i , j+1 , kbhit());
  }

  else if(ARRAY[i][j-1].val==small)
  {
	this->input(i , j-1 , ARRAY[i][j].val , ARRAY[i][j].color);
	this->input(i , j , 0 , 0);
	this->output();
	this->AI(Playeri, Playerj , i , j-1 , kbhit());
  }
  else return;
}

int confirmation(void)  //Function to check for confirmation
{                       //Returns 1 for yes 0 for no and -1 for
  clrscr();             //abnormal answers(i.e neither yes or no)
  char choice;
  gotoxy(27,11);
  cout<<"Are you sure you want to save?";
  gotoxy(27,13);
  cout<<"Choice (y/n) : ";
  cin>>choice;
  if(choice=='y'||choice=='Y')
	return 1;
  else if(choice=='n'||choice=='N')
	return 0;
  return -1; //Only happens for abnormal answers
}

void GUI(fstream &file ,int filepointer=0, int modifier_status=0)
{
  int t=0 , c=7; //Index variable
  int block[]={47,92,168,222,61,45,95,205,240,46}; //ASCII codes
  char move='\0';
  int x=1,y=1,chk=0;
  if (modifier_status)
  {
	file.seekg(filepointer);
	file.read((char*)&matrix , sizeof(matrix));
  }
  clrscr();
  while(1)
  {
	move=getch();
	switch(move)
	{
	  case 'W':
	  case 'w': gotoxy(x,y);     //Move Cursor UP
				cout<<' ';
				y--;
				if (y<1)
				  y=25;
				break;
	  case 'S':
	  case 's': gotoxy(x,y);     //Move Cursor DOWN
				cout<<' ';
				y++;
				if (y>25)
				  y=1;
				break;
	  case 'A':
	  case 'a': gotoxy(x,y);     //Move Cursor LEFT
				cout<<' ';
				x--;
				if (x<1)
				 x=80;
				break;
	  case 'D':
	  case 'd': gotoxy(x,y);     //Move Cursor RIGHT
				cout<<' ';
				x++;
				if (x>80)
				 x=1;
				break;
	  case ' ': matrix.input(y-1 , x-1 , block[t] , c);//Put current block
				break;                                 //in matrix
	  case 'R':
	  case 'r': matrix.input(y-1 , x-1 , 0 , 0); //Eraser
				clrscr();
				break;
	  case 'T':
	  case 't': ++t;        //Change block type
				if(t>9)
				  t=0;
				break;

	  case 'C':
	  case 'c': c++;        //Change color also no pun intended
		if(c>15)
		  c=1;
		textcolor(c);
		gotoxy(x,y);
		cprintf("%c",block[t]);
		break;

	  case '-': chk=confirmation(); //confirmation() returns 1 for yes
				if(chk)
				{
				  file.seekp(::global_filepointer);
				  file.write((char*)&matrix , sizeof(matrix));//Write to file
				  if(modifier_status)
					goto EXIT;
				  clrscr();
				  for (int i=0 ; i<25 ; ++i)
					for (int j=0 ; j<80 ; ++j)
					  matrix.input(i , j , 0 , 0);   //Clear Matrix
				  matrix.output();                   //Output Blank Screen
				}
				else if(!chk)
				{
				  clrscr();
				  matrix.output();
				}
				break;
	  case 'X':
	  case 'x': goto EXIT;
	}
	matrix.output();//Display Array
	gotoxy(x,y);  //Display currently selected block
	textcolor(c);
	cprintf("%c",block[t]);
	gotoxy(x,y);  //Small beautification detail
	gotoxy(1,1);
	//cout<<"X : "<<x<<"Y : "<<y;
  }
  EXIT:
}

void level_add(char name[15],int filepointer=0,int filemodifierstatus=0)
{
  fstream file;  //For database functions
  if (filepointer||filemodifierstatus)
	file.open(name,ios::out|ios::binary|ios::ate|ios::in);
  else
	file.open(name,ios::out|ios::binary|ios::app|ios::in);
  file.seekp(filepointer);
  GUI(file,filepointer,filemodifierstatus);
  clrscr();
}

void level_view(char name[15])
{
  clrscr();
  fstream file;
  char ch='\0';
  file.open(name,ios::in|ios::binary);
  while(1)
  {
	::global_filepointer=file.tellg();
	file.read((char*)&matrix , sizeof(matrix));
	if (file.eof())
	  break;
	clrscr();
	matrix.output();
	ch=getch();
	if (ch=='m'||ch=='M')
	  goto EXIT;
  }
  EXIT:
}

void level_modify(char name[15])
{
  clrscr();
  fstream file;
  file.open(name,ios::in|ios::out|ios::binary);
  level_view(name);
  clrscr();
  file.seekg(::global_filepointer);
  file.read((char*)&matrix , sizeof(matrix));
  matrix.output();
  level_add(name,::global_filepointer,1);
}

void main()
{
  textcolor(7);
  clrscr();
  char name[15];
  cout<<"Enter Database Name : ";
  cin.getline(name,14);
  cout<<"\n1.Add Levels"
	  <<"\n2.View Levels"
	  <<"\n3.Modify Levels"
	  <<"\n4.Exit"
	  <<"\n\nChoice : ";
  int choice=0;
  cin>>choice;
  if (choice==1)
	level_add(name);
  else if(choice==2)
	level_view(name);
  else if(choice==3)
	level_modify(name);
  else if(choice==4)
	goto MAINEXIT;
  MAINEXIT:
}
